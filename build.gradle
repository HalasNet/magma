apply plugin: 'idea'
apply from: 'libraries.gradle'

ext {
  javaVersion = '1.6'
}

allprojects {

  apply plugin: 'java'
  apply plugin: 'maven'

  group = 'org.obiba.magma'
  version = '1.6-gradle-SNAPSHOT'

  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion

  defaultTasks 'build'

  buildDir = 'target'

  repositories {
    maven { url 'http://repo.obiba.org/repo' }
    mavenCentral()
    mavenLocal()
  }

  tasks.withType(Compile) {
    options.encoding = 'UTF-8'
  }

  configurations {
    pmd
    compile
    runtime
    all*.exclude group: 'commons-logging'
  }

  jar {
    manifest {
      attributes 'Implementation-Title': project.name,
          'Implementation-Version': project.version,
          'Implementation-Vendor-Id': project.group,
          'Implementation-Vendor': 'OBiBa'
    }
  }

}

task wrapper(type: Wrapper) {
  gradleVersion = '1.6'
}

subprojects { subProject ->

  dependencies {
    compile(libraries.guava)
    compile(libraries.slf4j_api)
    compile(libraries.jsr305)
    compile(libraries.findbugs_annotation)

    testCompile project(':magma-test')
    testCompile(libraries.junit)
    testCompile(libraries.easymock)
    testCompile(libraries.hamcrest)
    testCompile(libraries.slf4j_log4j12)
    testCompile(libraries.jcl_slf4j)

    pmd 'net.sourceforge.pmd:pmd:5.0.3'
  }

  test {
    testLogging.showStandardStreams = true
  }

  // customize the generated POM used during upload
  def pomConfig = {
    name 'Magma'
    description 'Data and meta-data abstraction layer'
    url 'http://www.obiba.org'
    organization {
      name 'OBiBa'
      url 'http://www.obiba.org'
    }
    issueManagement {
      system 'jira'
      url 'http://jira.obiba.org/jira/browse/MAGMA'
    }
    scm {
      url "https://github.com/obiba/magma"
      connection "scm:git:git://github.com/obiba/magma.git"
      developerConnection "scm:git:https://github.com/obiba/magma.git"
    }
    licenses {
      license {
        name 'GNU Public License version 3'
        url 'http://www.obiba.org/node/62'
        distribution 'repo'
      }
    }
  }

  subProject.ext.basePomConfig = pomConfig

  configure(install.repositories.mavenInstaller) {
    pom.project pomConfig
  }

  // TODO: buildNumber

  task packageSources(type: Jar, dependsOn: compileJava) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }
  artifacts {
    archives packageSources
  }

  // Reporting
  apply plugin: 'project-report'
  reporting {
    baseDir "$buildDir/reports"
  }

  // FindBugs
  apply plugin: 'findbugs'
  findbugs {
    reportsDir = file("${reporting.baseDir}/findbugs-output")
    excludeFilter = file(rootProject.file('src/main/resources/findbugs-exclude.xml'))
    ignoreFailures = true
  }

  // PMD
  task pmd << {
    if (!file('src').exists()) return;
    file("${reporting.baseDir}").mkdirs()
    ant {
      taskdef(name: 'pmd', classname: 'net.sourceforge.pmd.ant.PMDTask', classpath: configurations.pmd.asPath)
      pmd(shortFilenames: 'true', failonruleviolation: 'false', rulesetfiles: rootProject.file('src/main/resources/pmd-ruleset.xml').toURI().toString()) {
        formatter(type: 'html', toFile: "${reporting.baseDir}/pmd.html")
        formatter(type: 'xml', toFile: "${reporting.baseDir}/pmd.xml")
        fileset(dir: 'src') {
          include(name: '**/*.java')
        }
      }
    }
  }

}
